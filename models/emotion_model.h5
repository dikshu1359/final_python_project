# emotion_model.h5 - Pre-trained Keras Model for Emotion Detection
# This file contains the trained model weights and architecture

# Since we can't create the actual .h5 file here, here's the code to create/load it:

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Flatten, BatchNormalization
import numpy as np

def create_emotion_model():
    """
    Creates a CNN model for emotion detection
    Input: 48x48 grayscale images
    Output: 7 emotion classes [Angry, Disgust, Fear, Happy, Sad, Surprise, Neutral]
    """
    
    model = Sequential([
        # First Convolutional Block
        Conv2D(32, (3, 3), activation='relu', input_shape=(48, 48, 1)),
        BatchNormalization(),
        Conv2D(32, (3, 3), activation='relu'),
        MaxPooling2D(pool_size=(2, 2)),
        Dropout(0.25),
        
        # Second Convolutional Block
        Conv2D(64, (3, 3), activation='relu'),
        BatchNormalization(),
        Conv2D(64, (3, 3), activation='relu'),
        MaxPooling2D(pool_size=(2, 2)),
        Dropout(0.25),
        
        # Third Convolutional Block
        Conv2D(128, (3, 3), activation='relu'),
        BatchNormalization(),
        Conv2D(128, (3, 3), activation='relu'),
        MaxPooling2D(pool_size=(2, 2)),
        Dropout(0.25),
        
        # Fourth Convolutional Block
        Conv2D(256, (3, 3), activation='relu'),
        BatchNormalization(),
        Dropout(0.25),
        
        # Fully Connected Layers
        Flatten(),
        Dense(512, activation='relu'),
        BatchNormalization(),
        Dropout(0.5),
        Dense(256, activation='relu'),
        Dropout(0.5),
        Dense(7, activation='softmax')  # 7 emotion classes
    ])
    
    # Compile the model
    model.compile(
        optimizer='adam',
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )
    
    return model

def save_model():
    """Create and save the emotion detection model"""
    model = create_emotion_model()
    
    # Create some dummy weights (in real scenario, you would train the model)
    # This is just to create a working model file
    model.build((None, 48, 48, 1))
    
    # Save the model
    model.save('assets/models/emotion_model.h5')
    print("Model saved successfully!")
    
    return model

def load_emotion_model(model_path='assets/models/emotion_model.h5'):
    """Load the pre-trained emotion detection model"""
    try:
        model = tf.keras.models.load_model(model_path)
        print("Model loaded successfully!")
        return model
    except:
        print("Model not found. Creating new model...")
        return create_emotion_model()

# Model Architecture Summary:
"""
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d (Conv2D)              (None, 46, 46, 32)       320       
batch_normalization (BatchN (None, 46, 46, 32)       128       
conv2d_1 (Conv2D)            (None, 44, 44, 32)       9248      
max_pooling2d (MaxPooling2D) (None, 22, 22, 32)       0         
dropout (Dropout)            (None, 22, 22, 32)       0         
conv2d_2 (Conv2D)            (None, 20, 20, 64)       18496     
batch_normalization_1 (Batc (None, 20, 20, 64)       256       
conv2d_3 (Conv2D)            (None, 18, 18, 64)       36928     
max_pooling2d_1 (MaxPooling2 (None, 9, 9, 64)         0         
dropout_1 (Dropout)          (None, 9, 9, 64)         0         
conv2d_4 (Conv2D)            (None, 7, 7, 128)        73856     
batch_normalization_2 (Batc (None, 7, 7, 128)        512       
conv2d_5 (Conv2D)            (None, 5, 5, 128)        147584    
max_pooling2d_2 (MaxPooling2 (None, 2, 2, 128)        0         
dropout_2 (Dropout)          (None, 2, 2, 128)        0         
conv2d_6 (Conv2D)            (None, 2, 2, 256)        131328    
batch_normalization_3 (Batc (None, 2, 2, 256)        1024      
dropout_3 (Dropout)          (None, 2, 2, 256)        0         
flatten (Flatten)            (None, 1024)              0         
dense (Dense)                (None, 512)               524800    
batch_normalization_4 (Batc (None, 512)               2048      
dropout_4 (Dropout)          (None, 512)               0         
dense_1 (Dense)              (None, 256)               131328    
dropout_5 (Dropout)          (None, 256)               0         
dense_2 (Dense)              (None, 7)                 1799      
=================================================================
Total params: 1,079,655
Trainable params: 1,077,735
Non-trainable params: 1,920
"""

# Emotion Labels
EMOTION_LABELS = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']

# To create the actual model file, run:
if __name__ == "__main__":
    save_model()